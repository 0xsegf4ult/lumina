#version 450

#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require

#include "shaders/gpu_scene.glsl"

layout (local_size_x = 32) in;

layout(std430, binding = 0) readonly buffer InputBuffer
{
	GPUIndirectObject gpu_indirect_objects[];
};

layout(std430, binding = 1) writeonly buffer OutputBuffer
{
	IndirectCommand indirect_commands[];
};

layout(std430, binding = 2) buffer MultibatchBuffer
{
	Multibatch multibatches[];
};

layout(std430, binding = 3) readonly buffer GPUObjectBuffer
{
	GPUObjectData gpu_objects[];
};

layout(std430, binding = 4) readonly buffer MeshLODBuffer
{
	MeshLOD lods[];
};

layout(std430, binding = 5) buffer CullingBuffer
{
	vec4 frustum_planes[4];
	mat4 viewmat;
	vec4 cam_pos;
	int frustum_cull;
	int occlusion_cull;
	float znear, zfar;
	float p00, p11, pyramid_w, pyramid_h;
	float lod_base;
	float lod_step;
	int forced_lod;
	uint global_draw_count;
} culling_data;

layout(binding = 6) uniform sampler2D depthPyramid; 

bool projectSphere(vec3 c, float r, float znear, float p00, float p11, out vec4 aabb)
{
	if(c.z < r + znear)
		return false;

	vec2 cxz = -c.xz;
	vec2 vx = vec2(sqrt(dot(cxz, cxz) - r * r), r);
	vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cxz;
	vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cxz;

	vec2 cyz = - c.yz;
	vec2 vy = vec2(sqrt(dot(cyz, cyz) - r * r), r);
	vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cyz;
	vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cyz;

	aabb = 0.5f - 0.5f * vec4(minx.x / minx.y * p00, miny.x / miny.y * p11, maxx.x / maxx.y * p00, maxy.x / maxy.y * p11);

	return true;
}

bool is_visible(uint id)
{
	bool visible = true;

	vec4 osphere = gpu_objects[gpu_indirect_objects[id].object].sphere;
	vec3 center = (culling_data.viewmat * vec4(osphere.xyz, 1.0f)).xyz;
	float radius = osphere.w;

	bool frustumCullingEnabled = (culling_data.frustum_cull == 1);
	if(subgroupAny(frustumCullingEnabled))
	{
		for(uint i = 0; i < 4; ++i)
		{
			visible = visible && dot(culling_data.frustum_planes[i], vec4(center, 1.0f)) > -radius;
		}
	}

	bool occlusionCullingEnabled = (culling_data.occlusion_cull == 1);
	if(subgroupAny(occlusionCullingEnabled))
	{
		if(visible)
		{
			vec4 aabb;
			if(projectSphere(center, radius, culling_data.znear, culling_data.p00, culling_data.p11, aabb))
			{
				float width = (aabb.z - aabb.x) * culling_data.pyramid_w;
				float height = (aabb.w - aabb.y) * culling_data.pyramid_h;

				float level = floor(log2(max(width, height)));

				float depth = textureLod(depthPyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
				float depthSphere = 0.1f / (center.z - radius);

				visible = visible && depthSphere >= depth;
			}
		}
	}

	return visible;
}

shared uint drawOffset;

void main()
{
	uint groupThreadIndex = gl_LocalInvocationID.x;
	uint gID = gl_GlobalInvocationID.x;
	uint batchID = gpu_indirect_objects[gID].batch;

	if(gID < multibatches[batchID].first + multibatches[batchID].count)
	{
		bool visible = is_visible(gID);
		uvec4 visibleBallot = subgroupBallot(visible);

		if(groupThreadIndex == 0)
		{
			uint drawCount = subgroupBallotBitCount(visibleBallot);
			drawOffset = atomicAdd(multibatches[batchID].draw_count, drawCount);
		}

		subgroupMemoryBarrierShared();

		if(visible)
		{
			vec3 center = gpu_objects[gpu_indirect_objects[gID].object].sphere.xyz;

			float mesh_dist = distance(center, culling_data.cam_pos.xyz);
			uint lodIndex = uint(max(1.0f + log(mesh_dist / culling_data.lod_base) / log(culling_data.lod_step), 0.0));
			lodIndex = min(culling_data.forced_lod < 0 ? lodIndex : culling_data.forced_lod, gpu_indirect_objects[gID].lod_count - 1);

			MeshLOD lod = lods[gpu_indirect_objects[gID].lod0_offset + lodIndex];
			
			IndirectCommand cmd;
			cmd.index_count = lod.index_count;
			cmd.instance_count = 1;
			cmd.index_offset = lod.index_offset;
			cmd.vertex_offset = lod.vertex_offset;
			cmd.instance_id = gpu_indirect_objects[gID].object;

			uint visibleIndex = subgroupBallotExclusiveBitCount(visibleBallot);
			uint commandIndex = drawOffset + visibleIndex + multibatches[batchID].first;
			indirect_commands[commandIndex] = cmd;
		}
	}
}


