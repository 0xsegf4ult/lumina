#version 450

#extension GL_KHR_shader_subgroup_vote: require
#extension GL_EXT_control_flow_attributes: require

#include "shaders/vertex_format.glsl"
#include "shaders/normal_encoding.glsl"

layout (local_size_x = 32) in;

layout(std430, binding = 0) readonly buffer InputBuffer
{
	SkinnedVertex sk_vertices[];
};

layout(std430, binding = 1) writeonly buffer OutputPosBuffer
{
	VertexPos sm_vert_pos[];
};

layout(std430, binding = 2) writeonly buffer OutputAttrBuffer
{
	VertexAttr sm_vert_attr[];
};

layout(std430, binding = 3) readonly buffer BoneBuffer
{
	mat4 bone_matrix[];
};

layout(push_constant) uniform pcb
{
	uint vertex_count;
	uint sk_vertex_offset;
	uint sm_vertex_offset;
	uint bone_offset;
};

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if(gID < vertex_count)
	{
		SkinnedVertex sk_vtx = sk_vertices[sk_vertex_offset + gID];
		vec3 pos = sk_vtx.pos;
		vec3 nrm = oct_to_vec3(sk_vtx.nrmOct);
		vec4 tang = decode_tangent(nrm, sk_vtx.tangentQ);

		if(subgroupAny(sk_vtx.weights != vec4(0.0f)))
		{
			vec4 p = vec4(0.0f);
			vec3 n = vec3(0.0f);
			vec3 t = vec3(0.0f);
			float wsum = 0.0f;

			[[unroll]]
			for(uint i = 0; ((i < 4) && (wsum < 1.0f)); i++)
			{
				uint shift = i * 8;
				uint bone = (((sk_vtx.joints >> shift)) & 0xFF);

				p += (bone_matrix[bone + bone_offset] * vec4(pos, 1.0f)) * sk_vtx.weights[i];
				n += (mat3(bone_matrix[bone + bone_offset]) * nrm) * sk_vtx.weights[i];
				t += (mat3(bone_matrix[bone + bone_offset]) * tang.xyz) * sk_vtx.weights[i];

				wsum += sk_vtx.weights[i];
			}
			pos = p.xyz;
			nrm = n.xyz;
			tang.xyz = t.xyz;
		}

		VertexPos sm_vp;
		sm_vp.pos_x = pos.x;
		sm_vp.pos_y = pos.y;
		sm_vp.pos_z = pos.z;
		sm_vert_pos[sm_vertex_offset + gID] = sm_vp;

		VertexAttr sm_va;
	//	sm_va.nrmOct = vec3_to_oct(nrm);
	//	sm_va.tangentQ = encode_tangent(nrm, tang.xyz, tang.w < 0.0f);
		sm_va.nrmOct = sk_vtx.nrmOct;
		sm_va.tangentQ = sk_vtx.tangentQ;
		sm_va.uv_x = sk_vtx.uv.x;
		sm_va.uv_y = sk_vtx.uv.y;
		sm_vert_attr[sm_vertex_offset + gID] = sm_va;
	}
}



