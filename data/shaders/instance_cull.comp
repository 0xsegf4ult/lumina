#version 450
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require
#extension GL_EXT_scalar_block_layout: require

#include "shaders/gpu_scene.glsl"

layout (local_size_x = 32) in;

layout(scalar, binding = 0) readonly buffer ObjectBuffer
{
	ObjectInstance objects[];
};

layout(scalar, binding = 1) readonly buffer InputBuffer
{
	uint instances[];
};

layout(scalar, binding = 2) writeonly buffer OutputBuffer
{
	ClusterInstance out_clusters[];
};

layout(scalar, binding = 3) buffer ArgumentBuffer
{
	uvec4 arguments;
};

layout(scalar, binding = 4) readonly buffer MeshLODBuffer
{
	MeshLOD lods[];
};

layout(scalar, binding = 5) uniform CullingData
{
	vec4 frustum_planes[4];
	mat4 viewmat;
	uint frustum_cull;
	uint occlusion_cull;
	uint cone_cull;
	uint is_ortho;
	float znear;
	float zfar;
	float p00;
	float p11;
	float pyramid_w;
	float pyramid_h;
	float lod_base;
	float lod_step;
	vec4 cam_pos;
	int forced_lod;
} culling_data;

layout (push_constant) uniform pconst
{
	uint instance_count;
} consts;

bool is_visible(vec4 sphere, float radius)
{
        bool visible = true;
        vec3 center = (culling_data.viewmat * sphere).xyz;

        if(culling_data.frustum_cull == 1)
        {
                if(culling_data.is_ortho == 1)
                {
                        for(uint i = 0; i < 4; ++i)
                                visible = visible && dot(culling_data.frustum_planes[i], vec4(center, 1.0f)) > -radius;
                }
                else
                {
                        visible = visible && center.z * culling_data.frustum_planes[0].y - abs(center.x) * culling_data.frustum_planes[0].x > -radius;
                        visible = visible && center.z * culling_data.frustum_planes[0].w - abs(center.y) * culling_data.frustum_planes[0].z > -radius;
                        visible = visible && -center.z + radius > culling_data.znear && -center.z - radius < culling_data.zfar;
                }
        }

        return visible;
}

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if(gID >= consts.instance_count)
		return;

	uint instance = instances[gID];
	vec4 center = objects[instance].transform * vec4(objects[instance].sphere.xyz, 1.0f);
	float radius = objects[instance].cull_scale * objects[instance].sphere.w;

	bool visible = is_visible(center, radius);
	uvec4 visibleBallot = subgroupBallot(visible);
	float mesh_dist = distance(center.xyz, culling_data.cam_pos.xyz);
	uint lodIndex = uint(max(1.0 + log(mesh_dist / culling_data.lod_base) / log(culling_data.lod_step), 0.0));
	uint lod_count = objects[instance].pack_bucket_lcount & 0xFFFF;
	lodIndex = min(culling_data.forced_lod < 0 ? lodIndex : culling_data.forced_lod, lod_count - 1);

	MeshLOD lod = lods[objects[instance].lod0_offset + lodIndex];

	if(visible)
	{
		uint drawOffset = atomicAdd(arguments.w, lod.cluster_count);

		for(uint i = 0; i < lod.cluster_count; i++)
		{
			ClusterInstance cl;
			cl.object = instance;
			cl.cluster = lod.cluster_offset + i;
			out_clusters[drawOffset + i] = cl;
		}
	}
}
