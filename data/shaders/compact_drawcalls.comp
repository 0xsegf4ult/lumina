#version 450

#include "shaders/gpu_scene.glsl"

layout (local_size_x = 256) in;

layout(std430, binding = 0) readonly buffer InputBuffer
{
	IndirectCommand indirect_commands[];
};

layout(std430, binding = 1) writeonly buffer OutputBuffer
{
	IndirectCommand compact_commands[];
};

layout(std430, binding = 2) readonly buffer InputIndexBuffer
{
	uint indices[];
};

layout(std430, binding = 3) readonly buffer InputMaskBuffer
{
	uint visible[];
};

layout(std430, binding = 4) readonly buffer MultibatchBuffer
{
	Multibatch multibatches[];
};

layout(std430, binding = 5) readonly buffer GPUObjectBuffer
{
	GPUIndirectObject indirect_objects[];
};

layout(push_constant) uniform pconst
{
	uint count;
} consts;

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	uint batchID = indirect_objects[gID].batch; 

	if(gID < consts.count)
	{
		if(visible[gID] > 0)
		{
			uint cOffset = 0;
			if(batchID > 0)
				cOffset = multibatches[batchID].first - multibatches[batchID - 1].draw_count;

			compact_commands[indices[gID] + cOffset - 1] = indirect_commands[gID];
		}
	}
}
